(function(window,undefined){var namespace=window,currentObject=window,currentClass=null,inheriting=false;namespace.classify=function(superclassOrName,definitionOrName,definition){var superclass,object,name;if(definition===undefined){name=superclassOrName;definition=definitionOrName;}
else{superclass=superclassOrName;name=definitionOrName;}
if(!currentObject[name]||typeof currentObject[name]!=="function"){currentObject[name]=buildClass(superclass);}
withCurrentClass(currentObject[name],function(){withCurrentObject(currentClass.prototype,function(){definition.call(currentClass);});});};namespace.def=function(objectOrName,definitionOrName,definition){var object,name;if(definition===undefined){object=currentObject;name=objectOrName;definition=definitionOrName;}
else{object=objectOrName;name=definitionOrName;}
definition=addSuperMethod(name,definition);object[name]=definition;};namespace.module=function(name,definition){if(currentObject[name]===undefined){currentObject[name]={};}
withCurrentObject(currentObject[name],function(){definition.call(currentObject);});};namespace.include=function(moduleOrName,module){var object,name;if(module===undefined){module=moduleOrName;object=(currentClass)?currentClass.prototype:currentObject;}
else{name=moduleOrName;object=currentObject[name];if(object.prototype){object=object.prototype;}}
addModule(object,module);};namespace.extend=function(nameOrModule,module){var object,name;if(module===undefined){if(currentClass!==null){module=nameOrModule;object=currentClass;}}
else{name=nameOrModule;object=currentObject[name];}
addModule(object,module);};namespace.alias=function(aliasName,name){currentObject[aliasName]=currentObject[name];};var withCurrentObject=function(newObject,block){var oldObject=currentObject;currentObject=newObject;block.call();currentObject=oldObject;},withCurrentClass=function(newClass,block){currentClass=newClass;block.call();currentClass=null;},buildClass=function(superclass){var newClass=function(){if(!inheriting&&this.initialize!==undefined){this.initialize.apply(this,arguments);}}
if(superclass){inheriting=true;newClass.prototype=new superclass();inheriting=false;}
newClass.superclass=superclass;newClass.constructor=newClass;return newClass;},addModule=function(object,module){if(object===undefined||module===undefined){return;}
if(typeof module==="function"){withCurrentObject(object,function(){module.call(object);});}
else{for(var name in module){object[name]=module[name];}}},addSuperMethod=function(name,definition){var superclass=currentClass!==null&&currentClass.superclass!==undefined&&currentClass.superclass.prototype;if(superclass&&typeof definition==="function"&&typeof superclass[name]==="function"&&callsSuper(definition)){return function(){var args=arguments,currentSuper=this.callSuper;this.callSuper=function(){for(var i=0,n=arguments.length;i<n;i++){args[i]=arguments[i];}
return superclass[name].apply(this,args);}
var result=definition.apply(this,arguments);this.callSuper=currentSuper;return result;};}
return definition;},callsSuper=function(method){return/\bcallSuper\b/.test(method.toString());};})(window);